Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit_or_empty
Rule 1     translation_unit_or_empty -> translation_unit
Rule 2     translation_unit_or_empty -> empty
Rule 3     translation_unit -> external_declaration
Rule 4     translation_unit -> translation_unit external_declaration
Rule 5     external_declaration -> function_declaration
Rule 6     external_declaration -> function_definition
Rule 7     function_definition -> func_decl LBRACE statement RBRACE
Rule 8     statement -> empty
Rule 9     statement -> expression_statement statement
Rule 10    statement -> if_statement statement
Rule 11    expression_statement -> assignment_statement SEMI
Rule 12    expression_statement -> func_call SEMI
Rule 13    expression_statement -> declarator SEMI
Rule 14    assignment_statement -> id EQUALS expression
Rule 15    assignment_statement -> id EQUALS func_call
Rule 16    expression -> unary_expression
Rule 17    expression -> binary_expression
Rule 18    expression -> cond_expression
Rule 19    binary_expression -> unary_expression bin_op unary_expression
Rule 20    binary_expression -> unary_expression bin_op binary_expression
Rule 21    binary_expression -> binary_expression bin_op binary_expression
Rule 22    binary_expression -> LPAREN unary_expression bin_op unary_expression RPAREN
Rule 23    binary_expression -> LPAREN unary_expression bin_op binary_expression RPAREN
Rule 24    binary_expression -> LPAREN binary_expression bin_op binary_expression RPAREN
Rule 25    unary_expression -> id
Rule 26    unary_expression -> int_const
Rule 27    bin_op -> PLUS
Rule 28    bin_op -> MINUS
Rule 29    cond_expression -> unary_expression GT unary_expression
Rule 30    cond_expression -> unary_expression LT unary_expression
Rule 31    cond_expression -> unary_expression EQ unary_expression
Rule 32    cond_expression -> LPAREN unary_expression GT unary_expression RPAREN
Rule 33    cond_expression -> LPAREN unary_expression LT unary_expression RPAREN
Rule 34    cond_expression -> LPAREN unary_expression EQ unary_expression RPAREN
Rule 35    cond_expression -> cond_expression OR cond_expression
Rule 36    cond_expression -> NOT cond_expression
Rule 37    cond_expression -> LPAREN cond_expression OR cond_expression RPAREN
Rule 38    cond_expression -> NOT LPAREN cond_expression RPAREN
Rule 39    if_statement -> IF LPAREN cond_expression RPAREN LBRACE statement RBRACE
Rule 40    func_call -> ID LPAREN arg_list RPAREN
Rule 41    arg_list -> empty
Rule 42    arg_list -> id
Rule 43    arg_list -> int_const
Rule 44    arg_list -> str_const
Rule 45    arg_list -> id COMMA arg_list
Rule 46    arg_list -> int_const COMMA arg_list
Rule 47    arg_list -> str_const COMMA arg_list
Rule 48    int_const -> ICONST
Rule 49    str_const -> SCONST
Rule 50    id -> ID
Rule 51    function_declaration -> func_decl SEMI
Rule 52    func_decl -> TYPEID ID LPAREN param_list RPAREN
Rule 53    declarator -> TYPEID ID
Rule 54    param_list -> empty
Rule 55    param_list -> declarator
Rule 56    param_list -> declarator COMMA param_list
Rule 57    empty -> <empty>

Terminals, with rules where they appear

COMMA                : 45 46 47 56
EQ                   : 31 34
EQUALS               : 14 15
GT                   : 29 32
ICONST               : 48
ID                   : 40 50 52 53
IF                   : 39
LBRACE               : 7 39
LPAREN               : 22 23 24 32 33 34 37 38 39 40 52
LT                   : 30 33
MINUS                : 28
NOT                  : 36 38
OR                   : 35 37
PLUS                 : 27
RBRACE               : 7 39
RPAREN               : 22 23 24 32 33 34 37 38 39 40 52
SCONST               : 49
SEMI                 : 11 12 13 51
TYPEID               : 52 53
error                : 

Nonterminals, with rules where they appear

arg_list             : 40 45 46 47
assignment_statement : 11
bin_op               : 19 20 21 22 23 24
binary_expression    : 17 20 21 21 23 24 24
cond_expression      : 18 35 35 36 37 37 38 39
declarator           : 13 55 56
empty                : 2 8 41 54
expression           : 14
expression_statement : 9
external_declaration : 3 4
func_call            : 12 15
func_decl            : 7 51
function_declaration : 5
function_definition  : 6
id                   : 14 15 25 42 45
if_statement         : 10
int_const            : 26 43 46
param_list           : 52 56
statement            : 7 9 10 39
str_const            : 44 47
translation_unit     : 1 4
translation_unit_or_empty : 0
unary_expression     : 16 19 19 20 22 22 23 29 29 30 30 31 31 32 32 33 33 34 34

Parsing method: LALR

state 0

    (0) S' -> . translation_unit_or_empty
    (1) translation_unit_or_empty -> . translation_unit
    (2) translation_unit_or_empty -> . empty
    (3) translation_unit -> . external_declaration
    (4) translation_unit -> . translation_unit external_declaration
    (57) empty -> .
    (5) external_declaration -> . function_declaration
    (6) external_declaration -> . function_definition
    (51) function_declaration -> . func_decl SEMI
    (7) function_definition -> . func_decl LBRACE statement RBRACE
    (52) func_decl -> . TYPEID ID LPAREN param_list RPAREN

    $end            reduce using rule 57 (empty -> .)
    TYPEID          shift and go to state 2

    external_declaration           shift and go to state 1
    function_definition            shift and go to state 3
    func_decl                      shift and go to state 4
    function_declaration           shift and go to state 5
    translation_unit_or_empty      shift and go to state 6
    translation_unit               shift and go to state 7
    empty                          shift and go to state 8

state 1

    (3) translation_unit -> external_declaration .

    TYPEID          reduce using rule 3 (translation_unit -> external_declaration .)
    $end            reduce using rule 3 (translation_unit -> external_declaration .)


state 2

    (52) func_decl -> TYPEID . ID LPAREN param_list RPAREN

    ID              shift and go to state 9


state 3

    (6) external_declaration -> function_definition .

    TYPEID          reduce using rule 6 (external_declaration -> function_definition .)
    $end            reduce using rule 6 (external_declaration -> function_definition .)


state 4

    (51) function_declaration -> func_decl . SEMI
    (7) function_definition -> func_decl . LBRACE statement RBRACE

    SEMI            shift and go to state 11
    LBRACE          shift and go to state 10


state 5

    (5) external_declaration -> function_declaration .

    TYPEID          reduce using rule 5 (external_declaration -> function_declaration .)
    $end            reduce using rule 5 (external_declaration -> function_declaration .)


state 6

    (0) S' -> translation_unit_or_empty .



state 7

    (1) translation_unit_or_empty -> translation_unit .
    (4) translation_unit -> translation_unit . external_declaration
    (5) external_declaration -> . function_declaration
    (6) external_declaration -> . function_definition
    (51) function_declaration -> . func_decl SEMI
    (7) function_definition -> . func_decl LBRACE statement RBRACE
    (52) func_decl -> . TYPEID ID LPAREN param_list RPAREN

    $end            reduce using rule 1 (translation_unit_or_empty -> translation_unit .)
    TYPEID          shift and go to state 2

    external_declaration           shift and go to state 12
    function_definition            shift and go to state 3
    func_decl                      shift and go to state 4
    function_declaration           shift and go to state 5

state 8

    (2) translation_unit_or_empty -> empty .

    $end            reduce using rule 2 (translation_unit_or_empty -> empty .)


state 9

    (52) func_decl -> TYPEID ID . LPAREN param_list RPAREN

    LPAREN          shift and go to state 13


state 10

    (7) function_definition -> func_decl LBRACE . statement RBRACE
    (8) statement -> . empty
    (9) statement -> . expression_statement statement
    (10) statement -> . if_statement statement
    (57) empty -> .
    (11) expression_statement -> . assignment_statement SEMI
    (12) expression_statement -> . func_call SEMI
    (13) expression_statement -> . declarator SEMI
    (39) if_statement -> . IF LPAREN cond_expression RPAREN LBRACE statement RBRACE
    (14) assignment_statement -> . id EQUALS expression
    (15) assignment_statement -> . id EQUALS func_call
    (40) func_call -> . ID LPAREN arg_list RPAREN
    (53) declarator -> . TYPEID ID
    (50) id -> . ID

    RBRACE          reduce using rule 57 (empty -> .)
    IF              shift and go to state 24
    ID              shift and go to state 20
    TYPEID          shift and go to state 16

    expression_statement           shift and go to state 14
    func_call                      shift and go to state 15
    assignment_statement           shift and go to state 17
    statement                      shift and go to state 18
    declarator                     shift and go to state 19
    if_statement                   shift and go to state 21
    id                             shift and go to state 22
    empty                          shift and go to state 23

state 11

    (51) function_declaration -> func_decl SEMI .

    TYPEID          reduce using rule 51 (function_declaration -> func_decl SEMI .)
    $end            reduce using rule 51 (function_declaration -> func_decl SEMI .)


state 12

    (4) translation_unit -> translation_unit external_declaration .

    TYPEID          reduce using rule 4 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 4 (translation_unit -> translation_unit external_declaration .)


state 13

    (52) func_decl -> TYPEID ID LPAREN . param_list RPAREN
    (54) param_list -> . empty
    (55) param_list -> . declarator
    (56) param_list -> . declarator COMMA param_list
    (57) empty -> .
    (53) declarator -> . TYPEID ID

    RPAREN          reduce using rule 57 (empty -> .)
    TYPEID          shift and go to state 16

    param_list                     shift and go to state 25
    empty                          shift and go to state 27
    declarator                     shift and go to state 26

state 14

    (9) statement -> expression_statement . statement
    (8) statement -> . empty
    (9) statement -> . expression_statement statement
    (10) statement -> . if_statement statement
    (57) empty -> .
    (11) expression_statement -> . assignment_statement SEMI
    (12) expression_statement -> . func_call SEMI
    (13) expression_statement -> . declarator SEMI
    (39) if_statement -> . IF LPAREN cond_expression RPAREN LBRACE statement RBRACE
    (14) assignment_statement -> . id EQUALS expression
    (15) assignment_statement -> . id EQUALS func_call
    (40) func_call -> . ID LPAREN arg_list RPAREN
    (53) declarator -> . TYPEID ID
    (50) id -> . ID

    RBRACE          reduce using rule 57 (empty -> .)
    IF              shift and go to state 24
    ID              shift and go to state 20
    TYPEID          shift and go to state 16

    expression_statement           shift and go to state 14
    func_call                      shift and go to state 15
    assignment_statement           shift and go to state 17
    statement                      shift and go to state 28
    declarator                     shift and go to state 19
    if_statement                   shift and go to state 21
    id                             shift and go to state 22
    empty                          shift and go to state 23

state 15

    (12) expression_statement -> func_call . SEMI

    SEMI            shift and go to state 29


state 16

    (53) declarator -> TYPEID . ID

    ID              shift and go to state 30


state 17

    (11) expression_statement -> assignment_statement . SEMI

    SEMI            shift and go to state 31


state 18

    (7) function_definition -> func_decl LBRACE statement . RBRACE

    RBRACE          shift and go to state 32


state 19

    (13) expression_statement -> declarator . SEMI

    SEMI            shift and go to state 33


state 20

    (40) func_call -> ID . LPAREN arg_list RPAREN
    (50) id -> ID .

    LPAREN          shift and go to state 34
    GT              reduce using rule 50 (id -> ID .)
    LT              reduce using rule 50 (id -> ID .)
    EQ              reduce using rule 50 (id -> ID .)
    PLUS            reduce using rule 50 (id -> ID .)
    MINUS           reduce using rule 50 (id -> ID .)
    SEMI            reduce using rule 50 (id -> ID .)
    EQUALS          reduce using rule 50 (id -> ID .)


state 21

    (10) statement -> if_statement . statement
    (8) statement -> . empty
    (9) statement -> . expression_statement statement
    (10) statement -> . if_statement statement
    (57) empty -> .
    (11) expression_statement -> . assignment_statement SEMI
    (12) expression_statement -> . func_call SEMI
    (13) expression_statement -> . declarator SEMI
    (39) if_statement -> . IF LPAREN cond_expression RPAREN LBRACE statement RBRACE
    (14) assignment_statement -> . id EQUALS expression
    (15) assignment_statement -> . id EQUALS func_call
    (40) func_call -> . ID LPAREN arg_list RPAREN
    (53) declarator -> . TYPEID ID
    (50) id -> . ID

    RBRACE          reduce using rule 57 (empty -> .)
    IF              shift and go to state 24
    ID              shift and go to state 20
    TYPEID          shift and go to state 16

    expression_statement           shift and go to state 14
    func_call                      shift and go to state 15
    assignment_statement           shift and go to state 17
    statement                      shift and go to state 35
    declarator                     shift and go to state 19
    if_statement                   shift and go to state 21
    id                             shift and go to state 22
    empty                          shift and go to state 23

state 22

    (14) assignment_statement -> id . EQUALS expression
    (15) assignment_statement -> id . EQUALS func_call

    EQUALS          shift and go to state 36


state 23

    (8) statement -> empty .

    RBRACE          reduce using rule 8 (statement -> empty .)


state 24

    (39) if_statement -> IF . LPAREN cond_expression RPAREN LBRACE statement RBRACE

    LPAREN          shift and go to state 37


state 25

    (52) func_decl -> TYPEID ID LPAREN param_list . RPAREN

    RPAREN          shift and go to state 38


state 26

    (55) param_list -> declarator .
    (56) param_list -> declarator . COMMA param_list

    RPAREN          reduce using rule 55 (param_list -> declarator .)
    COMMA           shift and go to state 39


state 27

    (54) param_list -> empty .

    RPAREN          reduce using rule 54 (param_list -> empty .)


state 28

    (9) statement -> expression_statement statement .

    RBRACE          reduce using rule 9 (statement -> expression_statement statement .)


state 29

    (12) expression_statement -> func_call SEMI .

    IF              reduce using rule 12 (expression_statement -> func_call SEMI .)
    ID              reduce using rule 12 (expression_statement -> func_call SEMI .)
    TYPEID          reduce using rule 12 (expression_statement -> func_call SEMI .)
    RBRACE          reduce using rule 12 (expression_statement -> func_call SEMI .)


state 30

    (53) declarator -> TYPEID ID .

    SEMI            reduce using rule 53 (declarator -> TYPEID ID .)
    COMMA           reduce using rule 53 (declarator -> TYPEID ID .)
    RPAREN          reduce using rule 53 (declarator -> TYPEID ID .)


state 31

    (11) expression_statement -> assignment_statement SEMI .

    IF              reduce using rule 11 (expression_statement -> assignment_statement SEMI .)
    ID              reduce using rule 11 (expression_statement -> assignment_statement SEMI .)
    TYPEID          reduce using rule 11 (expression_statement -> assignment_statement SEMI .)
    RBRACE          reduce using rule 11 (expression_statement -> assignment_statement SEMI .)


state 32

    (7) function_definition -> func_decl LBRACE statement RBRACE .

    TYPEID          reduce using rule 7 (function_definition -> func_decl LBRACE statement RBRACE .)
    $end            reduce using rule 7 (function_definition -> func_decl LBRACE statement RBRACE .)


state 33

    (13) expression_statement -> declarator SEMI .

    IF              reduce using rule 13 (expression_statement -> declarator SEMI .)
    ID              reduce using rule 13 (expression_statement -> declarator SEMI .)
    TYPEID          reduce using rule 13 (expression_statement -> declarator SEMI .)
    RBRACE          reduce using rule 13 (expression_statement -> declarator SEMI .)


state 34

    (40) func_call -> ID LPAREN . arg_list RPAREN
    (41) arg_list -> . empty
    (42) arg_list -> . id
    (43) arg_list -> . int_const
    (44) arg_list -> . str_const
    (45) arg_list -> . id COMMA arg_list
    (46) arg_list -> . int_const COMMA arg_list
    (47) arg_list -> . str_const COMMA arg_list
    (57) empty -> .
    (50) id -> . ID
    (48) int_const -> . ICONST
    (49) str_const -> . SCONST

    RPAREN          reduce using rule 57 (empty -> .)
    ID              shift and go to state 43
    ICONST          shift and go to state 44
    SCONST          shift and go to state 42

    str_const                      shift and go to state 41
    int_const                      shift and go to state 40
    id                             shift and go to state 45
    empty                          shift and go to state 46
    arg_list                       shift and go to state 47

state 35

    (10) statement -> if_statement statement .

    RBRACE          reduce using rule 10 (statement -> if_statement statement .)


state 36

    (14) assignment_statement -> id EQUALS . expression
    (15) assignment_statement -> id EQUALS . func_call
    (16) expression -> . unary_expression
    (17) expression -> . binary_expression
    (18) expression -> . cond_expression
    (40) func_call -> . ID LPAREN arg_list RPAREN
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (19) binary_expression -> . unary_expression bin_op unary_expression
    (20) binary_expression -> . unary_expression bin_op binary_expression
    (21) binary_expression -> . binary_expression bin_op binary_expression
    (22) binary_expression -> . LPAREN unary_expression bin_op unary_expression RPAREN
    (23) binary_expression -> . LPAREN unary_expression bin_op binary_expression RPAREN
    (24) binary_expression -> . LPAREN binary_expression bin_op binary_expression RPAREN
    (29) cond_expression -> . unary_expression GT unary_expression
    (30) cond_expression -> . unary_expression LT unary_expression
    (31) cond_expression -> . unary_expression EQ unary_expression
    (32) cond_expression -> . LPAREN unary_expression GT unary_expression RPAREN
    (33) cond_expression -> . LPAREN unary_expression LT unary_expression RPAREN
    (34) cond_expression -> . LPAREN unary_expression EQ unary_expression RPAREN
    (35) cond_expression -> . cond_expression OR cond_expression
    (36) cond_expression -> . NOT cond_expression
    (37) cond_expression -> . LPAREN cond_expression OR cond_expression RPAREN
    (38) cond_expression -> . NOT LPAREN cond_expression RPAREN
    (50) id -> . ID
    (48) int_const -> . ICONST

    ID              shift and go to state 20
    LPAREN          shift and go to state 52
    NOT             shift and go to state 53
    ICONST          shift and go to state 44

    func_call                      shift and go to state 48
    int_const                      shift and go to state 49
    binary_expression              shift and go to state 50
    unary_expression               shift and go to state 51
    expression                     shift and go to state 54
    id                             shift and go to state 55
    cond_expression                shift and go to state 56

state 37

    (39) if_statement -> IF LPAREN . cond_expression RPAREN LBRACE statement RBRACE
    (29) cond_expression -> . unary_expression GT unary_expression
    (30) cond_expression -> . unary_expression LT unary_expression
    (31) cond_expression -> . unary_expression EQ unary_expression
    (32) cond_expression -> . LPAREN unary_expression GT unary_expression RPAREN
    (33) cond_expression -> . LPAREN unary_expression LT unary_expression RPAREN
    (34) cond_expression -> . LPAREN unary_expression EQ unary_expression RPAREN
    (35) cond_expression -> . cond_expression OR cond_expression
    (36) cond_expression -> . NOT cond_expression
    (37) cond_expression -> . LPAREN cond_expression OR cond_expression RPAREN
    (38) cond_expression -> . NOT LPAREN cond_expression RPAREN
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (50) id -> . ID
    (48) int_const -> . ICONST

    LPAREN          shift and go to state 57
    NOT             shift and go to state 53
    ID              shift and go to state 43
    ICONST          shift and go to state 44

    int_const                      shift and go to state 49
    unary_expression               shift and go to state 58
    cond_expression                shift and go to state 59
    id                             shift and go to state 55

state 38

    (52) func_decl -> TYPEID ID LPAREN param_list RPAREN .

    SEMI            reduce using rule 52 (func_decl -> TYPEID ID LPAREN param_list RPAREN .)
    LBRACE          reduce using rule 52 (func_decl -> TYPEID ID LPAREN param_list RPAREN .)


state 39

    (56) param_list -> declarator COMMA . param_list
    (54) param_list -> . empty
    (55) param_list -> . declarator
    (56) param_list -> . declarator COMMA param_list
    (57) empty -> .
    (53) declarator -> . TYPEID ID

    RPAREN          reduce using rule 57 (empty -> .)
    TYPEID          shift and go to state 16

    param_list                     shift and go to state 60
    empty                          shift and go to state 27
    declarator                     shift and go to state 26

state 40

    (43) arg_list -> int_const .
    (46) arg_list -> int_const . COMMA arg_list

    RPAREN          reduce using rule 43 (arg_list -> int_const .)
    COMMA           shift and go to state 61


state 41

    (44) arg_list -> str_const .
    (47) arg_list -> str_const . COMMA arg_list

    RPAREN          reduce using rule 44 (arg_list -> str_const .)
    COMMA           shift and go to state 62


state 42

    (49) str_const -> SCONST .

    COMMA           reduce using rule 49 (str_const -> SCONST .)
    RPAREN          reduce using rule 49 (str_const -> SCONST .)


state 43

    (50) id -> ID .

    GT              reduce using rule 50 (id -> ID .)
    LT              reduce using rule 50 (id -> ID .)
    EQ              reduce using rule 50 (id -> ID .)
    PLUS            reduce using rule 50 (id -> ID .)
    MINUS           reduce using rule 50 (id -> ID .)
    OR              reduce using rule 50 (id -> ID .)
    SEMI            reduce using rule 50 (id -> ID .)
    RPAREN          reduce using rule 50 (id -> ID .)
    COMMA           reduce using rule 50 (id -> ID .)


state 44

    (48) int_const -> ICONST .

    PLUS            reduce using rule 48 (int_const -> ICONST .)
    MINUS           reduce using rule 48 (int_const -> ICONST .)
    SEMI            reduce using rule 48 (int_const -> ICONST .)
    RPAREN          reduce using rule 48 (int_const -> ICONST .)
    OR              reduce using rule 48 (int_const -> ICONST .)
    GT              reduce using rule 48 (int_const -> ICONST .)
    LT              reduce using rule 48 (int_const -> ICONST .)
    EQ              reduce using rule 48 (int_const -> ICONST .)
    COMMA           reduce using rule 48 (int_const -> ICONST .)


state 45

    (42) arg_list -> id .
    (45) arg_list -> id . COMMA arg_list

    RPAREN          reduce using rule 42 (arg_list -> id .)
    COMMA           shift and go to state 63


state 46

    (41) arg_list -> empty .

    RPAREN          reduce using rule 41 (arg_list -> empty .)


state 47

    (40) func_call -> ID LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 64


state 48

    (15) assignment_statement -> id EQUALS func_call .

    SEMI            reduce using rule 15 (assignment_statement -> id EQUALS func_call .)


state 49

    (26) unary_expression -> int_const .

    GT              reduce using rule 26 (unary_expression -> int_const .)
    LT              reduce using rule 26 (unary_expression -> int_const .)
    EQ              reduce using rule 26 (unary_expression -> int_const .)
    PLUS            reduce using rule 26 (unary_expression -> int_const .)
    MINUS           reduce using rule 26 (unary_expression -> int_const .)
    OR              reduce using rule 26 (unary_expression -> int_const .)
    SEMI            reduce using rule 26 (unary_expression -> int_const .)
    RPAREN          reduce using rule 26 (unary_expression -> int_const .)


state 50

    (17) expression -> binary_expression .
    (21) binary_expression -> binary_expression . bin_op binary_expression
    (27) bin_op -> . PLUS
    (28) bin_op -> . MINUS

    SEMI            reduce using rule 17 (expression -> binary_expression .)
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67

    bin_op                         shift and go to state 65

state 51

    (16) expression -> unary_expression .
    (19) binary_expression -> unary_expression . bin_op unary_expression
    (20) binary_expression -> unary_expression . bin_op binary_expression
    (29) cond_expression -> unary_expression . GT unary_expression
    (30) cond_expression -> unary_expression . LT unary_expression
    (31) cond_expression -> unary_expression . EQ unary_expression
    (27) bin_op -> . PLUS
    (28) bin_op -> . MINUS

    SEMI            reduce using rule 16 (expression -> unary_expression .)
    GT              shift and go to state 68
    LT              shift and go to state 70
    EQ              shift and go to state 71
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67

    bin_op                         shift and go to state 69

state 52

    (22) binary_expression -> LPAREN . unary_expression bin_op unary_expression RPAREN
    (23) binary_expression -> LPAREN . unary_expression bin_op binary_expression RPAREN
    (24) binary_expression -> LPAREN . binary_expression bin_op binary_expression RPAREN
    (32) cond_expression -> LPAREN . unary_expression GT unary_expression RPAREN
    (33) cond_expression -> LPAREN . unary_expression LT unary_expression RPAREN
    (34) cond_expression -> LPAREN . unary_expression EQ unary_expression RPAREN
    (37) cond_expression -> LPAREN . cond_expression OR cond_expression RPAREN
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (19) binary_expression -> . unary_expression bin_op unary_expression
    (20) binary_expression -> . unary_expression bin_op binary_expression
    (21) binary_expression -> . binary_expression bin_op binary_expression
    (22) binary_expression -> . LPAREN unary_expression bin_op unary_expression RPAREN
    (23) binary_expression -> . LPAREN unary_expression bin_op binary_expression RPAREN
    (24) binary_expression -> . LPAREN binary_expression bin_op binary_expression RPAREN
    (29) cond_expression -> . unary_expression GT unary_expression
    (30) cond_expression -> . unary_expression LT unary_expression
    (31) cond_expression -> . unary_expression EQ unary_expression
    (32) cond_expression -> . LPAREN unary_expression GT unary_expression RPAREN
    (33) cond_expression -> . LPAREN unary_expression LT unary_expression RPAREN
    (34) cond_expression -> . LPAREN unary_expression EQ unary_expression RPAREN
    (35) cond_expression -> . cond_expression OR cond_expression
    (36) cond_expression -> . NOT cond_expression
    (37) cond_expression -> . LPAREN cond_expression OR cond_expression RPAREN
    (38) cond_expression -> . NOT LPAREN cond_expression RPAREN
    (50) id -> . ID
    (48) int_const -> . ICONST

    LPAREN          shift and go to state 52
    NOT             shift and go to state 53
    ID              shift and go to state 43
    ICONST          shift and go to state 44

    int_const                      shift and go to state 49
    binary_expression              shift and go to state 72
    unary_expression               shift and go to state 73
    id                             shift and go to state 55
    cond_expression                shift and go to state 74

state 53

    (36) cond_expression -> NOT . cond_expression
    (38) cond_expression -> NOT . LPAREN cond_expression RPAREN
    (29) cond_expression -> . unary_expression GT unary_expression
    (30) cond_expression -> . unary_expression LT unary_expression
    (31) cond_expression -> . unary_expression EQ unary_expression
    (32) cond_expression -> . LPAREN unary_expression GT unary_expression RPAREN
    (33) cond_expression -> . LPAREN unary_expression LT unary_expression RPAREN
    (34) cond_expression -> . LPAREN unary_expression EQ unary_expression RPAREN
    (35) cond_expression -> . cond_expression OR cond_expression
    (36) cond_expression -> . NOT cond_expression
    (37) cond_expression -> . LPAREN cond_expression OR cond_expression RPAREN
    (38) cond_expression -> . NOT LPAREN cond_expression RPAREN
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (50) id -> . ID
    (48) int_const -> . ICONST

    LPAREN          shift and go to state 75
    NOT             shift and go to state 53
    ID              shift and go to state 43
    ICONST          shift and go to state 44

    int_const                      shift and go to state 49
    unary_expression               shift and go to state 58
    cond_expression                shift and go to state 76
    id                             shift and go to state 55

state 54

    (14) assignment_statement -> id EQUALS expression .

    SEMI            reduce using rule 14 (assignment_statement -> id EQUALS expression .)


state 55

    (25) unary_expression -> id .

    GT              reduce using rule 25 (unary_expression -> id .)
    LT              reduce using rule 25 (unary_expression -> id .)
    EQ              reduce using rule 25 (unary_expression -> id .)
    PLUS            reduce using rule 25 (unary_expression -> id .)
    MINUS           reduce using rule 25 (unary_expression -> id .)
    OR              reduce using rule 25 (unary_expression -> id .)
    SEMI            reduce using rule 25 (unary_expression -> id .)
    RPAREN          reduce using rule 25 (unary_expression -> id .)


state 56

    (18) expression -> cond_expression .
    (35) cond_expression -> cond_expression . OR cond_expression

    SEMI            reduce using rule 18 (expression -> cond_expression .)
    OR              shift and go to state 77


state 57

    (32) cond_expression -> LPAREN . unary_expression GT unary_expression RPAREN
    (33) cond_expression -> LPAREN . unary_expression LT unary_expression RPAREN
    (34) cond_expression -> LPAREN . unary_expression EQ unary_expression RPAREN
    (37) cond_expression -> LPAREN . cond_expression OR cond_expression RPAREN
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (29) cond_expression -> . unary_expression GT unary_expression
    (30) cond_expression -> . unary_expression LT unary_expression
    (31) cond_expression -> . unary_expression EQ unary_expression
    (32) cond_expression -> . LPAREN unary_expression GT unary_expression RPAREN
    (33) cond_expression -> . LPAREN unary_expression LT unary_expression RPAREN
    (34) cond_expression -> . LPAREN unary_expression EQ unary_expression RPAREN
    (35) cond_expression -> . cond_expression OR cond_expression
    (36) cond_expression -> . NOT cond_expression
    (37) cond_expression -> . LPAREN cond_expression OR cond_expression RPAREN
    (38) cond_expression -> . NOT LPAREN cond_expression RPAREN
    (50) id -> . ID
    (48) int_const -> . ICONST

    LPAREN          shift and go to state 57
    NOT             shift and go to state 53
    ID              shift and go to state 43
    ICONST          shift and go to state 44

    int_const                      shift and go to state 49
    cond_expression                shift and go to state 74
    unary_expression               shift and go to state 78
    id                             shift and go to state 55

state 58

    (29) cond_expression -> unary_expression . GT unary_expression
    (30) cond_expression -> unary_expression . LT unary_expression
    (31) cond_expression -> unary_expression . EQ unary_expression

    GT              shift and go to state 68
    LT              shift and go to state 70
    EQ              shift and go to state 71


state 59

    (39) if_statement -> IF LPAREN cond_expression . RPAREN LBRACE statement RBRACE
    (35) cond_expression -> cond_expression . OR cond_expression

    RPAREN          shift and go to state 79
    OR              shift and go to state 77


state 60

    (56) param_list -> declarator COMMA param_list .

    RPAREN          reduce using rule 56 (param_list -> declarator COMMA param_list .)


state 61

    (46) arg_list -> int_const COMMA . arg_list
    (41) arg_list -> . empty
    (42) arg_list -> . id
    (43) arg_list -> . int_const
    (44) arg_list -> . str_const
    (45) arg_list -> . id COMMA arg_list
    (46) arg_list -> . int_const COMMA arg_list
    (47) arg_list -> . str_const COMMA arg_list
    (57) empty -> .
    (50) id -> . ID
    (48) int_const -> . ICONST
    (49) str_const -> . SCONST

    RPAREN          reduce using rule 57 (empty -> .)
    ID              shift and go to state 43
    ICONST          shift and go to state 44
    SCONST          shift and go to state 42

    str_const                      shift and go to state 41
    int_const                      shift and go to state 40
    id                             shift and go to state 45
    empty                          shift and go to state 46
    arg_list                       shift and go to state 80

state 62

    (47) arg_list -> str_const COMMA . arg_list
    (41) arg_list -> . empty
    (42) arg_list -> . id
    (43) arg_list -> . int_const
    (44) arg_list -> . str_const
    (45) arg_list -> . id COMMA arg_list
    (46) arg_list -> . int_const COMMA arg_list
    (47) arg_list -> . str_const COMMA arg_list
    (57) empty -> .
    (50) id -> . ID
    (48) int_const -> . ICONST
    (49) str_const -> . SCONST

    RPAREN          reduce using rule 57 (empty -> .)
    ID              shift and go to state 43
    ICONST          shift and go to state 44
    SCONST          shift and go to state 42

    str_const                      shift and go to state 41
    int_const                      shift and go to state 40
    id                             shift and go to state 45
    empty                          shift and go to state 46
    arg_list                       shift and go to state 81

state 63

    (45) arg_list -> id COMMA . arg_list
    (41) arg_list -> . empty
    (42) arg_list -> . id
    (43) arg_list -> . int_const
    (44) arg_list -> . str_const
    (45) arg_list -> . id COMMA arg_list
    (46) arg_list -> . int_const COMMA arg_list
    (47) arg_list -> . str_const COMMA arg_list
    (57) empty -> .
    (50) id -> . ID
    (48) int_const -> . ICONST
    (49) str_const -> . SCONST

    RPAREN          reduce using rule 57 (empty -> .)
    ID              shift and go to state 43
    ICONST          shift and go to state 44
    SCONST          shift and go to state 42

    str_const                      shift and go to state 41
    int_const                      shift and go to state 40
    id                             shift and go to state 45
    empty                          shift and go to state 46
    arg_list                       shift and go to state 82

state 64

    (40) func_call -> ID LPAREN arg_list RPAREN .

    SEMI            reduce using rule 40 (func_call -> ID LPAREN arg_list RPAREN .)


state 65

    (21) binary_expression -> binary_expression bin_op . binary_expression
    (19) binary_expression -> . unary_expression bin_op unary_expression
    (20) binary_expression -> . unary_expression bin_op binary_expression
    (21) binary_expression -> . binary_expression bin_op binary_expression
    (22) binary_expression -> . LPAREN unary_expression bin_op unary_expression RPAREN
    (23) binary_expression -> . LPAREN unary_expression bin_op binary_expression RPAREN
    (24) binary_expression -> . LPAREN binary_expression bin_op binary_expression RPAREN
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (50) id -> . ID
    (48) int_const -> . ICONST

    LPAREN          shift and go to state 85
    ID              shift and go to state 43
    ICONST          shift and go to state 44

    int_const                      shift and go to state 49
    binary_expression              shift and go to state 83
    unary_expression               shift and go to state 84
    id                             shift and go to state 55

state 66

    (27) bin_op -> PLUS .

    LPAREN          reduce using rule 27 (bin_op -> PLUS .)
    ID              reduce using rule 27 (bin_op -> PLUS .)
    ICONST          reduce using rule 27 (bin_op -> PLUS .)


state 67

    (28) bin_op -> MINUS .

    LPAREN          reduce using rule 28 (bin_op -> MINUS .)
    ID              reduce using rule 28 (bin_op -> MINUS .)
    ICONST          reduce using rule 28 (bin_op -> MINUS .)


state 68

    (29) cond_expression -> unary_expression GT . unary_expression
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (50) id -> . ID
    (48) int_const -> . ICONST

    ID              shift and go to state 43
    ICONST          shift and go to state 44

    int_const                      shift and go to state 49
    id                             shift and go to state 55
    unary_expression               shift and go to state 86

state 69

    (19) binary_expression -> unary_expression bin_op . unary_expression
    (20) binary_expression -> unary_expression bin_op . binary_expression
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (19) binary_expression -> . unary_expression bin_op unary_expression
    (20) binary_expression -> . unary_expression bin_op binary_expression
    (21) binary_expression -> . binary_expression bin_op binary_expression
    (22) binary_expression -> . LPAREN unary_expression bin_op unary_expression RPAREN
    (23) binary_expression -> . LPAREN unary_expression bin_op binary_expression RPAREN
    (24) binary_expression -> . LPAREN binary_expression bin_op binary_expression RPAREN
    (50) id -> . ID
    (48) int_const -> . ICONST

    LPAREN          shift and go to state 85
    ID              shift and go to state 43
    ICONST          shift and go to state 44

    int_const                      shift and go to state 49
    binary_expression              shift and go to state 87
    unary_expression               shift and go to state 88
    id                             shift and go to state 55

state 70

    (30) cond_expression -> unary_expression LT . unary_expression
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (50) id -> . ID
    (48) int_const -> . ICONST

    ID              shift and go to state 43
    ICONST          shift and go to state 44

    int_const                      shift and go to state 49
    id                             shift and go to state 55
    unary_expression               shift and go to state 89

state 71

    (31) cond_expression -> unary_expression EQ . unary_expression
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (50) id -> . ID
    (48) int_const -> . ICONST

    ID              shift and go to state 43
    ICONST          shift and go to state 44

    int_const                      shift and go to state 49
    id                             shift and go to state 55
    unary_expression               shift and go to state 90

state 72

    (24) binary_expression -> LPAREN binary_expression . bin_op binary_expression RPAREN
    (21) binary_expression -> binary_expression . bin_op binary_expression
    (27) bin_op -> . PLUS
    (28) bin_op -> . MINUS

    PLUS            shift and go to state 66
    MINUS           shift and go to state 67

    bin_op                         shift and go to state 91

state 73

    (22) binary_expression -> LPAREN unary_expression . bin_op unary_expression RPAREN
    (23) binary_expression -> LPAREN unary_expression . bin_op binary_expression RPAREN
    (32) cond_expression -> LPAREN unary_expression . GT unary_expression RPAREN
    (33) cond_expression -> LPAREN unary_expression . LT unary_expression RPAREN
    (34) cond_expression -> LPAREN unary_expression . EQ unary_expression RPAREN
    (19) binary_expression -> unary_expression . bin_op unary_expression
    (20) binary_expression -> unary_expression . bin_op binary_expression
    (29) cond_expression -> unary_expression . GT unary_expression
    (30) cond_expression -> unary_expression . LT unary_expression
    (31) cond_expression -> unary_expression . EQ unary_expression
    (27) bin_op -> . PLUS
    (28) bin_op -> . MINUS

    GT              shift and go to state 92
    LT              shift and go to state 94
    EQ              shift and go to state 95
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67

    bin_op                         shift and go to state 93

state 74

    (37) cond_expression -> LPAREN cond_expression . OR cond_expression RPAREN
    (35) cond_expression -> cond_expression . OR cond_expression

    OR              shift and go to state 96


state 75

    (38) cond_expression -> NOT LPAREN . cond_expression RPAREN
    (32) cond_expression -> LPAREN . unary_expression GT unary_expression RPAREN
    (33) cond_expression -> LPAREN . unary_expression LT unary_expression RPAREN
    (34) cond_expression -> LPAREN . unary_expression EQ unary_expression RPAREN
    (37) cond_expression -> LPAREN . cond_expression OR cond_expression RPAREN
    (29) cond_expression -> . unary_expression GT unary_expression
    (30) cond_expression -> . unary_expression LT unary_expression
    (31) cond_expression -> . unary_expression EQ unary_expression
    (32) cond_expression -> . LPAREN unary_expression GT unary_expression RPAREN
    (33) cond_expression -> . LPAREN unary_expression LT unary_expression RPAREN
    (34) cond_expression -> . LPAREN unary_expression EQ unary_expression RPAREN
    (35) cond_expression -> . cond_expression OR cond_expression
    (36) cond_expression -> . NOT cond_expression
    (37) cond_expression -> . LPAREN cond_expression OR cond_expression RPAREN
    (38) cond_expression -> . NOT LPAREN cond_expression RPAREN
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (50) id -> . ID
    (48) int_const -> . ICONST

    LPAREN          shift and go to state 57
    NOT             shift and go to state 53
    ID              shift and go to state 43
    ICONST          shift and go to state 44

    int_const                      shift and go to state 49
    unary_expression               shift and go to state 78
    cond_expression                shift and go to state 97
    id                             shift and go to state 55

state 76

    (36) cond_expression -> NOT cond_expression .
    (35) cond_expression -> cond_expression . OR cond_expression

  ! shift/reduce conflict for OR resolved as shift
    SEMI            reduce using rule 36 (cond_expression -> NOT cond_expression .)
    RPAREN          reduce using rule 36 (cond_expression -> NOT cond_expression .)
    OR              shift and go to state 77

  ! OR              [ reduce using rule 36 (cond_expression -> NOT cond_expression .) ]


state 77

    (35) cond_expression -> cond_expression OR . cond_expression
    (29) cond_expression -> . unary_expression GT unary_expression
    (30) cond_expression -> . unary_expression LT unary_expression
    (31) cond_expression -> . unary_expression EQ unary_expression
    (32) cond_expression -> . LPAREN unary_expression GT unary_expression RPAREN
    (33) cond_expression -> . LPAREN unary_expression LT unary_expression RPAREN
    (34) cond_expression -> . LPAREN unary_expression EQ unary_expression RPAREN
    (35) cond_expression -> . cond_expression OR cond_expression
    (36) cond_expression -> . NOT cond_expression
    (37) cond_expression -> . LPAREN cond_expression OR cond_expression RPAREN
    (38) cond_expression -> . NOT LPAREN cond_expression RPAREN
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (50) id -> . ID
    (48) int_const -> . ICONST

    LPAREN          shift and go to state 57
    NOT             shift and go to state 53
    ID              shift and go to state 43
    ICONST          shift and go to state 44

    int_const                      shift and go to state 49
    unary_expression               shift and go to state 58
    cond_expression                shift and go to state 98
    id                             shift and go to state 55

state 78

    (32) cond_expression -> LPAREN unary_expression . GT unary_expression RPAREN
    (33) cond_expression -> LPAREN unary_expression . LT unary_expression RPAREN
    (34) cond_expression -> LPAREN unary_expression . EQ unary_expression RPAREN
    (29) cond_expression -> unary_expression . GT unary_expression
    (30) cond_expression -> unary_expression . LT unary_expression
    (31) cond_expression -> unary_expression . EQ unary_expression

    GT              shift and go to state 92
    LT              shift and go to state 94
    EQ              shift and go to state 95


state 79

    (39) if_statement -> IF LPAREN cond_expression RPAREN . LBRACE statement RBRACE

    LBRACE          shift and go to state 99


state 80

    (46) arg_list -> int_const COMMA arg_list .

    RPAREN          reduce using rule 46 (arg_list -> int_const COMMA arg_list .)


state 81

    (47) arg_list -> str_const COMMA arg_list .

    RPAREN          reduce using rule 47 (arg_list -> str_const COMMA arg_list .)


state 82

    (45) arg_list -> id COMMA arg_list .

    RPAREN          reduce using rule 45 (arg_list -> id COMMA arg_list .)


state 83

    (21) binary_expression -> binary_expression bin_op binary_expression .
    (21) binary_expression -> binary_expression . bin_op binary_expression
    (27) bin_op -> . PLUS
    (28) bin_op -> . MINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMI            reduce using rule 21 (binary_expression -> binary_expression bin_op binary_expression .)
    RPAREN          reduce using rule 21 (binary_expression -> binary_expression bin_op binary_expression .)
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67

  ! PLUS            [ reduce using rule 21 (binary_expression -> binary_expression bin_op binary_expression .) ]
  ! MINUS           [ reduce using rule 21 (binary_expression -> binary_expression bin_op binary_expression .) ]

    bin_op                         shift and go to state 65

state 84

    (19) binary_expression -> unary_expression . bin_op unary_expression
    (20) binary_expression -> unary_expression . bin_op binary_expression
    (27) bin_op -> . PLUS
    (28) bin_op -> . MINUS

    PLUS            shift and go to state 66
    MINUS           shift and go to state 67

    bin_op                         shift and go to state 69

state 85

    (22) binary_expression -> LPAREN . unary_expression bin_op unary_expression RPAREN
    (23) binary_expression -> LPAREN . unary_expression bin_op binary_expression RPAREN
    (24) binary_expression -> LPAREN . binary_expression bin_op binary_expression RPAREN
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (19) binary_expression -> . unary_expression bin_op unary_expression
    (20) binary_expression -> . unary_expression bin_op binary_expression
    (21) binary_expression -> . binary_expression bin_op binary_expression
    (22) binary_expression -> . LPAREN unary_expression bin_op unary_expression RPAREN
    (23) binary_expression -> . LPAREN unary_expression bin_op binary_expression RPAREN
    (24) binary_expression -> . LPAREN binary_expression bin_op binary_expression RPAREN
    (50) id -> . ID
    (48) int_const -> . ICONST

    LPAREN          shift and go to state 85
    ID              shift and go to state 43
    ICONST          shift and go to state 44

    int_const                      shift and go to state 49
    binary_expression              shift and go to state 72
    unary_expression               shift and go to state 100
    id                             shift and go to state 55

state 86

    (29) cond_expression -> unary_expression GT unary_expression .

    OR              reduce using rule 29 (cond_expression -> unary_expression GT unary_expression .)
    SEMI            reduce using rule 29 (cond_expression -> unary_expression GT unary_expression .)
    RPAREN          reduce using rule 29 (cond_expression -> unary_expression GT unary_expression .)


state 87

    (20) binary_expression -> unary_expression bin_op binary_expression .
    (21) binary_expression -> binary_expression . bin_op binary_expression
    (27) bin_op -> . PLUS
    (28) bin_op -> . MINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMI            reduce using rule 20 (binary_expression -> unary_expression bin_op binary_expression .)
    RPAREN          reduce using rule 20 (binary_expression -> unary_expression bin_op binary_expression .)
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67

  ! PLUS            [ reduce using rule 20 (binary_expression -> unary_expression bin_op binary_expression .) ]
  ! MINUS           [ reduce using rule 20 (binary_expression -> unary_expression bin_op binary_expression .) ]

    bin_op                         shift and go to state 65

state 88

    (19) binary_expression -> unary_expression bin_op unary_expression .
    (19) binary_expression -> unary_expression . bin_op unary_expression
    (20) binary_expression -> unary_expression . bin_op binary_expression
    (27) bin_op -> . PLUS
    (28) bin_op -> . MINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMI            reduce using rule 19 (binary_expression -> unary_expression bin_op unary_expression .)
    RPAREN          reduce using rule 19 (binary_expression -> unary_expression bin_op unary_expression .)
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67

  ! PLUS            [ reduce using rule 19 (binary_expression -> unary_expression bin_op unary_expression .) ]
  ! MINUS           [ reduce using rule 19 (binary_expression -> unary_expression bin_op unary_expression .) ]

    bin_op                         shift and go to state 69

state 89

    (30) cond_expression -> unary_expression LT unary_expression .

    OR              reduce using rule 30 (cond_expression -> unary_expression LT unary_expression .)
    SEMI            reduce using rule 30 (cond_expression -> unary_expression LT unary_expression .)
    RPAREN          reduce using rule 30 (cond_expression -> unary_expression LT unary_expression .)


state 90

    (31) cond_expression -> unary_expression EQ unary_expression .

    OR              reduce using rule 31 (cond_expression -> unary_expression EQ unary_expression .)
    SEMI            reduce using rule 31 (cond_expression -> unary_expression EQ unary_expression .)
    RPAREN          reduce using rule 31 (cond_expression -> unary_expression EQ unary_expression .)


state 91

    (24) binary_expression -> LPAREN binary_expression bin_op . binary_expression RPAREN
    (21) binary_expression -> binary_expression bin_op . binary_expression
    (19) binary_expression -> . unary_expression bin_op unary_expression
    (20) binary_expression -> . unary_expression bin_op binary_expression
    (21) binary_expression -> . binary_expression bin_op binary_expression
    (22) binary_expression -> . LPAREN unary_expression bin_op unary_expression RPAREN
    (23) binary_expression -> . LPAREN unary_expression bin_op binary_expression RPAREN
    (24) binary_expression -> . LPAREN binary_expression bin_op binary_expression RPAREN
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (50) id -> . ID
    (48) int_const -> . ICONST

    LPAREN          shift and go to state 85
    ID              shift and go to state 43
    ICONST          shift and go to state 44

    int_const                      shift and go to state 49
    binary_expression              shift and go to state 101
    unary_expression               shift and go to state 84
    id                             shift and go to state 55

state 92

    (32) cond_expression -> LPAREN unary_expression GT . unary_expression RPAREN
    (29) cond_expression -> unary_expression GT . unary_expression
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (50) id -> . ID
    (48) int_const -> . ICONST

    ID              shift and go to state 43
    ICONST          shift and go to state 44

    int_const                      shift and go to state 49
    id                             shift and go to state 55
    unary_expression               shift and go to state 102

state 93

    (22) binary_expression -> LPAREN unary_expression bin_op . unary_expression RPAREN
    (23) binary_expression -> LPAREN unary_expression bin_op . binary_expression RPAREN
    (19) binary_expression -> unary_expression bin_op . unary_expression
    (20) binary_expression -> unary_expression bin_op . binary_expression
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (19) binary_expression -> . unary_expression bin_op unary_expression
    (20) binary_expression -> . unary_expression bin_op binary_expression
    (21) binary_expression -> . binary_expression bin_op binary_expression
    (22) binary_expression -> . LPAREN unary_expression bin_op unary_expression RPAREN
    (23) binary_expression -> . LPAREN unary_expression bin_op binary_expression RPAREN
    (24) binary_expression -> . LPAREN binary_expression bin_op binary_expression RPAREN
    (50) id -> . ID
    (48) int_const -> . ICONST

    LPAREN          shift and go to state 85
    ID              shift and go to state 43
    ICONST          shift and go to state 44

    int_const                      shift and go to state 49
    binary_expression              shift and go to state 103
    unary_expression               shift and go to state 104
    id                             shift and go to state 55

state 94

    (33) cond_expression -> LPAREN unary_expression LT . unary_expression RPAREN
    (30) cond_expression -> unary_expression LT . unary_expression
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (50) id -> . ID
    (48) int_const -> . ICONST

    ID              shift and go to state 43
    ICONST          shift and go to state 44

    int_const                      shift and go to state 49
    id                             shift and go to state 55
    unary_expression               shift and go to state 105

state 95

    (34) cond_expression -> LPAREN unary_expression EQ . unary_expression RPAREN
    (31) cond_expression -> unary_expression EQ . unary_expression
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (50) id -> . ID
    (48) int_const -> . ICONST

    ID              shift and go to state 43
    ICONST          shift and go to state 44

    int_const                      shift and go to state 49
    id                             shift and go to state 55
    unary_expression               shift and go to state 106

state 96

    (37) cond_expression -> LPAREN cond_expression OR . cond_expression RPAREN
    (35) cond_expression -> cond_expression OR . cond_expression
    (29) cond_expression -> . unary_expression GT unary_expression
    (30) cond_expression -> . unary_expression LT unary_expression
    (31) cond_expression -> . unary_expression EQ unary_expression
    (32) cond_expression -> . LPAREN unary_expression GT unary_expression RPAREN
    (33) cond_expression -> . LPAREN unary_expression LT unary_expression RPAREN
    (34) cond_expression -> . LPAREN unary_expression EQ unary_expression RPAREN
    (35) cond_expression -> . cond_expression OR cond_expression
    (36) cond_expression -> . NOT cond_expression
    (37) cond_expression -> . LPAREN cond_expression OR cond_expression RPAREN
    (38) cond_expression -> . NOT LPAREN cond_expression RPAREN
    (25) unary_expression -> . id
    (26) unary_expression -> . int_const
    (50) id -> . ID
    (48) int_const -> . ICONST

    LPAREN          shift and go to state 57
    NOT             shift and go to state 53
    ID              shift and go to state 43
    ICONST          shift and go to state 44

    int_const                      shift and go to state 49
    unary_expression               shift and go to state 58
    cond_expression                shift and go to state 107
    id                             shift and go to state 55

state 97

    (38) cond_expression -> NOT LPAREN cond_expression . RPAREN
    (37) cond_expression -> LPAREN cond_expression . OR cond_expression RPAREN
    (35) cond_expression -> cond_expression . OR cond_expression

    RPAREN          shift and go to state 108
    OR              shift and go to state 96


state 98

    (35) cond_expression -> cond_expression OR cond_expression .
    (35) cond_expression -> cond_expression . OR cond_expression

  ! shift/reduce conflict for OR resolved as shift
    SEMI            reduce using rule 35 (cond_expression -> cond_expression OR cond_expression .)
    RPAREN          reduce using rule 35 (cond_expression -> cond_expression OR cond_expression .)
    OR              shift and go to state 77

  ! OR              [ reduce using rule 35 (cond_expression -> cond_expression OR cond_expression .) ]


state 99

    (39) if_statement -> IF LPAREN cond_expression RPAREN LBRACE . statement RBRACE
    (8) statement -> . empty
    (9) statement -> . expression_statement statement
    (10) statement -> . if_statement statement
    (57) empty -> .
    (11) expression_statement -> . assignment_statement SEMI
    (12) expression_statement -> . func_call SEMI
    (13) expression_statement -> . declarator SEMI
    (39) if_statement -> . IF LPAREN cond_expression RPAREN LBRACE statement RBRACE
    (14) assignment_statement -> . id EQUALS expression
    (15) assignment_statement -> . id EQUALS func_call
    (40) func_call -> . ID LPAREN arg_list RPAREN
    (53) declarator -> . TYPEID ID
    (50) id -> . ID

    RBRACE          reduce using rule 57 (empty -> .)
    IF              shift and go to state 24
    ID              shift and go to state 20
    TYPEID          shift and go to state 16

    expression_statement           shift and go to state 14
    func_call                      shift and go to state 15
    assignment_statement           shift and go to state 17
    statement                      shift and go to state 109
    declarator                     shift and go to state 19
    if_statement                   shift and go to state 21
    id                             shift and go to state 22
    empty                          shift and go to state 23

state 100

    (22) binary_expression -> LPAREN unary_expression . bin_op unary_expression RPAREN
    (23) binary_expression -> LPAREN unary_expression . bin_op binary_expression RPAREN
    (19) binary_expression -> unary_expression . bin_op unary_expression
    (20) binary_expression -> unary_expression . bin_op binary_expression
    (27) bin_op -> . PLUS
    (28) bin_op -> . MINUS

    PLUS            shift and go to state 66
    MINUS           shift and go to state 67

    bin_op                         shift and go to state 93

state 101

    (24) binary_expression -> LPAREN binary_expression bin_op binary_expression . RPAREN
    (21) binary_expression -> binary_expression bin_op binary_expression .
    (21) binary_expression -> binary_expression . bin_op binary_expression
    (27) bin_op -> . PLUS
    (28) bin_op -> . MINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RPAREN          shift and go to state 110
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67

  ! PLUS            [ reduce using rule 21 (binary_expression -> binary_expression bin_op binary_expression .) ]
  ! MINUS           [ reduce using rule 21 (binary_expression -> binary_expression bin_op binary_expression .) ]

    bin_op                         shift and go to state 65

state 102

    (32) cond_expression -> LPAREN unary_expression GT unary_expression . RPAREN
    (29) cond_expression -> unary_expression GT unary_expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 111
    OR              reduce using rule 29 (cond_expression -> unary_expression GT unary_expression .)

  ! RPAREN          [ reduce using rule 29 (cond_expression -> unary_expression GT unary_expression .) ]


state 103

    (23) binary_expression -> LPAREN unary_expression bin_op binary_expression . RPAREN
    (20) binary_expression -> unary_expression bin_op binary_expression .
    (21) binary_expression -> binary_expression . bin_op binary_expression
    (27) bin_op -> . PLUS
    (28) bin_op -> . MINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RPAREN          shift and go to state 112
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67

  ! PLUS            [ reduce using rule 20 (binary_expression -> unary_expression bin_op binary_expression .) ]
  ! MINUS           [ reduce using rule 20 (binary_expression -> unary_expression bin_op binary_expression .) ]

    bin_op                         shift and go to state 65

state 104

    (22) binary_expression -> LPAREN unary_expression bin_op unary_expression . RPAREN
    (19) binary_expression -> unary_expression bin_op unary_expression .
    (19) binary_expression -> unary_expression . bin_op unary_expression
    (20) binary_expression -> unary_expression . bin_op binary_expression
    (27) bin_op -> . PLUS
    (28) bin_op -> . MINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RPAREN          shift and go to state 113
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67

  ! PLUS            [ reduce using rule 19 (binary_expression -> unary_expression bin_op unary_expression .) ]
  ! MINUS           [ reduce using rule 19 (binary_expression -> unary_expression bin_op unary_expression .) ]

    bin_op                         shift and go to state 69

state 105

    (33) cond_expression -> LPAREN unary_expression LT unary_expression . RPAREN
    (30) cond_expression -> unary_expression LT unary_expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 114
    OR              reduce using rule 30 (cond_expression -> unary_expression LT unary_expression .)

  ! RPAREN          [ reduce using rule 30 (cond_expression -> unary_expression LT unary_expression .) ]


state 106

    (34) cond_expression -> LPAREN unary_expression EQ unary_expression . RPAREN
    (31) cond_expression -> unary_expression EQ unary_expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 115
    OR              reduce using rule 31 (cond_expression -> unary_expression EQ unary_expression .)

  ! RPAREN          [ reduce using rule 31 (cond_expression -> unary_expression EQ unary_expression .) ]


state 107

    (37) cond_expression -> LPAREN cond_expression OR cond_expression . RPAREN
    (35) cond_expression -> cond_expression OR cond_expression .
    (35) cond_expression -> cond_expression . OR cond_expression

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          shift and go to state 116
    OR              shift and go to state 77

  ! OR              [ reduce using rule 35 (cond_expression -> cond_expression OR cond_expression .) ]
  ! RPAREN          [ reduce using rule 35 (cond_expression -> cond_expression OR cond_expression .) ]


state 108

    (38) cond_expression -> NOT LPAREN cond_expression RPAREN .

    OR              reduce using rule 38 (cond_expression -> NOT LPAREN cond_expression RPAREN .)
    SEMI            reduce using rule 38 (cond_expression -> NOT LPAREN cond_expression RPAREN .)
    RPAREN          reduce using rule 38 (cond_expression -> NOT LPAREN cond_expression RPAREN .)


state 109

    (39) if_statement -> IF LPAREN cond_expression RPAREN LBRACE statement . RBRACE

    RBRACE          shift and go to state 117


state 110

    (24) binary_expression -> LPAREN binary_expression bin_op binary_expression RPAREN .

    PLUS            reduce using rule 24 (binary_expression -> LPAREN binary_expression bin_op binary_expression RPAREN .)
    MINUS           reduce using rule 24 (binary_expression -> LPAREN binary_expression bin_op binary_expression RPAREN .)
    SEMI            reduce using rule 24 (binary_expression -> LPAREN binary_expression bin_op binary_expression RPAREN .)
    RPAREN          reduce using rule 24 (binary_expression -> LPAREN binary_expression bin_op binary_expression RPAREN .)


state 111

    (32) cond_expression -> LPAREN unary_expression GT unary_expression RPAREN .

    OR              reduce using rule 32 (cond_expression -> LPAREN unary_expression GT unary_expression RPAREN .)
    SEMI            reduce using rule 32 (cond_expression -> LPAREN unary_expression GT unary_expression RPAREN .)
    RPAREN          reduce using rule 32 (cond_expression -> LPAREN unary_expression GT unary_expression RPAREN .)


state 112

    (23) binary_expression -> LPAREN unary_expression bin_op binary_expression RPAREN .

    PLUS            reduce using rule 23 (binary_expression -> LPAREN unary_expression bin_op binary_expression RPAREN .)
    MINUS           reduce using rule 23 (binary_expression -> LPAREN unary_expression bin_op binary_expression RPAREN .)
    SEMI            reduce using rule 23 (binary_expression -> LPAREN unary_expression bin_op binary_expression RPAREN .)
    RPAREN          reduce using rule 23 (binary_expression -> LPAREN unary_expression bin_op binary_expression RPAREN .)


state 113

    (22) binary_expression -> LPAREN unary_expression bin_op unary_expression RPAREN .

    PLUS            reduce using rule 22 (binary_expression -> LPAREN unary_expression bin_op unary_expression RPAREN .)
    MINUS           reduce using rule 22 (binary_expression -> LPAREN unary_expression bin_op unary_expression RPAREN .)
    SEMI            reduce using rule 22 (binary_expression -> LPAREN unary_expression bin_op unary_expression RPAREN .)
    RPAREN          reduce using rule 22 (binary_expression -> LPAREN unary_expression bin_op unary_expression RPAREN .)


state 114

    (33) cond_expression -> LPAREN unary_expression LT unary_expression RPAREN .

    OR              reduce using rule 33 (cond_expression -> LPAREN unary_expression LT unary_expression RPAREN .)
    SEMI            reduce using rule 33 (cond_expression -> LPAREN unary_expression LT unary_expression RPAREN .)
    RPAREN          reduce using rule 33 (cond_expression -> LPAREN unary_expression LT unary_expression RPAREN .)


state 115

    (34) cond_expression -> LPAREN unary_expression EQ unary_expression RPAREN .

    OR              reduce using rule 34 (cond_expression -> LPAREN unary_expression EQ unary_expression RPAREN .)
    SEMI            reduce using rule 34 (cond_expression -> LPAREN unary_expression EQ unary_expression RPAREN .)
    RPAREN          reduce using rule 34 (cond_expression -> LPAREN unary_expression EQ unary_expression RPAREN .)


state 116

    (37) cond_expression -> LPAREN cond_expression OR cond_expression RPAREN .

    OR              reduce using rule 37 (cond_expression -> LPAREN cond_expression OR cond_expression RPAREN .)
    SEMI            reduce using rule 37 (cond_expression -> LPAREN cond_expression OR cond_expression RPAREN .)
    RPAREN          reduce using rule 37 (cond_expression -> LPAREN cond_expression OR cond_expression RPAREN .)


state 117

    (39) if_statement -> IF LPAREN cond_expression RPAREN LBRACE statement RBRACE .

    IF              reduce using rule 39 (if_statement -> IF LPAREN cond_expression RPAREN LBRACE statement RBRACE .)
    ID              reduce using rule 39 (if_statement -> IF LPAREN cond_expression RPAREN LBRACE statement RBRACE .)
    TYPEID          reduce using rule 39 (if_statement -> IF LPAREN cond_expression RPAREN LBRACE statement RBRACE .)
    RBRACE          reduce using rule 39 (if_statement -> IF LPAREN cond_expression RPAREN LBRACE statement RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OR in state 76 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 88 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 105 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 106 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 107 resolved as shift
WARNING: shift/reduce conflict for OR in state 107 resolved as shift
